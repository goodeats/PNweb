<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,500,700,900">
<style>
.app-header {
  margin-bottom: 20px;
  text-align: center;
  font: 2rem/1.175 "BlinkMacSystemFont", -apple-system, "Roboto", sans-serif;
}

.form-button {
  font: 1rem/1.175 "BlinkMacSystemFont", -apple-system, "Roboto", sans-serif;
}

.box-item {
  border: 1px solid black;
  margin: 20px;
  list-style: none;
  font: 1rem/1.175 "BlinkMacSystemFont", -apple-system, "Roboto", sans-serif;
}

.card-item {
  width: 50px;
  height: 80px;
  display: inline-block;
  position: relative;
  margin: 20px;
  margin-right: -30px;
  background: white;
  border: 1px solid black;
  border-radius: 10px;
  text-align: center;
  font: 1rem/1.175 "BlinkMacSystemFont", -apple-system, "Roboto", sans-serif;
}

.card-name--top,
.card-name--bottom {
  position: absolute;
  padding: 5px;
}

.card-name--top {
  top: 0;
  left: 0;
}

.card-name--bottom {
  bottom: 0;
  right: 0;
  transform: rotate(180deg);
}

.card-suit {
  line-height: 80px;
}


</style>


<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>
<script>

Vue.component('card', {
  props: ['card'],
  template: `
    <li class="card-item">
      <span class="card-name--top">{{ pretty_card(card) }}</span>
      <span class="card-suit">{{ card.suit }}</span>
      <span class="card-name--bottom">{{ pretty_card(card) }} </span>
    </li>
  `,
  methods: {
    pretty_card: function(card){
      return card.name.toString().toUpperCase();
    }
  }
});

Vue.component('box', {
  props: ['player', 'cards'],
  template: `
    <li class="box-item">
      <h3 class="box-name--top">{{ pretty_card(player) }}</h3>
      <p class="box-score" v-html="player_score(player, player.score)"></p>
      <p>game_status: {{ player.game_status }}</p>
      <p>game_started: {{ player.game_started }}</p>
      <p>game_over: {{ player.game_over }}</p>

      <card
        v-for="hand in player.hands"
        :card="hand"
      ></card>
      <div v-if="player_can_hit(player)">
        <p><button @click="hit">Hit me!</button></p>
        <p><button @click="stand(player)">Stand</button></p>
      </div>
    </li>
  `,
  methods: {
    pretty_card: function(player){
      return player.player_name.toString().toUpperCase();
    },
    player_can_hit: function(player){
      return app && app.current_player === this.player && this.player.game_started && !this.player.game_ended;
    },
    player_score: function(player, score){
      var player_score = score[0];
      var dealer_score = app ? app.dealer.score[0] : [0,0];

      // bust if you ever go above 21
      if (player_score > 21){
        player.busted = true;
        player.game_status = 'BUSTED! 😭';
        this.player_game_over(player);

      // win if you get exactly 21, but be careful if dealer gets blackjack too
      } else if (player_score === 21){
        // if dealer gets 21
        if (app.game_over && dealer_score === 21 && !player.dealer){
          // set new status if game over and dealer got blackjack
          player.game_status = 'Dealer Blackjack! 😧';
        } else {
          // end the player's game if they got blackjack
          player.game_status = 'BLACKJACK! ' + (!player.dealer ? '🤑' : '😈');
          this.player_game_over(player);
        }

      // game ends with player and dealer both below 21
      } else if (app && app.game_over){
        this.player_game_over(player);
        if (app.dealer.busted){
          player.game_status = 'You Won 🤑';
        } else if (player_score === dealer_score){
          if (player.dealer){
            player.game_status = 'Dealer finished';
          } else {
            player.game_status = 'You Tied 😐';
          }
        } else {
          if (player_score > dealer_score){
            player.game_status = 'You Won 🤑';
          } else {
            player.game_status = 'You Lost 😵';
          }
        }
      }

      // update the player's score after each card played
      return player.player_name + ' score: ' + this.score_with_ace(player, score);
    },

    // show score options if player has an ace
    score_with_ace: function(player, score){
      var player_score = score[0];
      var player_score_alt = score[1];

      // no score options necessary if player got 21
      if (player_score === 21){
        return player_score + '!';

      // if player got an ace show score options unless their game is over
      // in which case show the higher score
      // app.update_score will do the work of setting the value to 1 if the score is over with 11
      } else if (player_score !== player_score_alt){
        return player.game_ended ? player_score : player_score + " (or " + player_score_alt + ")";

      // player did not draw an ace, just show score
      } else {
        return player_score;
      }
    },
    player_game_over: function(player){
      player.game_over = true;
      player.game_ended = true;
      // skip to next player if player busts or gets blackjack,
      // but only when it's their turn and not after the game is over
      if (app.current_player === player) this.next_player(player);
    },
    hit: function(){

      return app.deal();
    },
    stand: function(player){
      player.game_ended = true;
      this.next_player(player);
    },
    next_player: function(player){
      if (app.game_over) return;
      return !player.dealer ? app.next_player() : app.end_game();
    }
  }
});

function suits(){
  return ['❤️','♠️','♦️','♣️'];
}

function cards_by_value(){
  var deck = [
    {name: 'a', value: 11, value_alt: 1},
    {name: 'k', value: 10},
    {name: 'q', value: 10},
    {name: 'j', value: 10}
  ];
  for (var i = 10; i > 1; i--){
    deck.push({name: i, value: i});
  }
  return deck;
}

function get_deck(){
  var deck = [];
  cards_by_value().forEach(function(card){
    suits().forEach(function(suit){
      var card_copy = JSON.parse(JSON.stringify(card));
      card_copy.suit = suit;
      deck = [...deck, card_copy];
    });
  });
  return deck;
}

function get_player(id){
  return {
    id: id,
    player_name: 'Player ' + id,
    score: [0,0],
    has_ace: false,
    hands: [],
    game_status: 'Start the game!',
    game_started: false,
    game_ended: false,
    game_over: false
  };
}

function get_dealer(){
  return Object.assign(get_player(), {
    dealer:       true,
    id:           0,
    player_name:  'Dealer'
  });
}

// keep this outside the app data since resetting a game should keep the same number of players
var players_count = 1;

function get_players(count){
  var players = [];
  for (var i = 0; i < count; i++){
    // i will set id to help move onto next player
    players = [...players, get_player(i + 1)];
  }
  return players;
}

function default_data(){
  return {
    message: 'Hi Pat!',
    deck: get_deck(),
    players_count: players_count,
    players: get_players(players_count),
    current_player: '',
    dealer: get_dealer(),
    game_status: 'Start the game!',
    game_started: false,
    game_over: false,
    button_text: {
      start: 'Start Game',
      reset: 'Reset Game',
      restart: 'Play New Game'
    }
  };
}

var app = new Vue({
  el: '#app',
  data: default_data(),
  methods: {
    show_game_status: function(){
      if (this.game_over){
        return {
          color: 'red'
        };
      } else if (this.game_started){
        return {
          color: 'green'
        };
      }
    },
    shuffle: function(){
      return this.deck.sort((a, b) => Math.random() > .5 ? -1 : 1);
    },
    deal: function(){
      if (this.game_over) return;
      if (this.game_started){
        this.deal_card(this.pull_card_from_deck());
      } else {
        this.start_game();
      }
    },
    get_card_count_to_deal: function(){
      // start count at 2 for dealer
      return 2 + (this.players.length * 2);
    },
    start_game: function(){
      // shuffle deck so aces aren't first
      this.shuffle();

      // set var for this to be used inside for loop
      var appThis = this;

      // get card count to know number of times to loop dealing out
      var cards_to_deal = this.get_card_count_to_deal();

      // initialize the first player to deal the card to
      this.current_player = this.players[0];

      for (var i = 0; i < cards_to_deal; i++){
        appThis.deal_card(this.pull_card_from_deck());
        appThis.next_player();
      }
      this.game_started = true;
      this.game_status = 'Playing the game';
    },
    update_players_count: function(e){
      var new_players_count = e.target.value;
      // update global variable so a restarted game has the same number of players
      players_count = new_players_count;
      app.players_count = new_players_count;
      app.players = get_players(new_players_count);
    },
    next_player: function(){
      var next_player = this.get_next_player();
      this.current_player = next_player && !next_player.game_ended ? next_player : this.dealer;
      if (app.game_started && this.current_player === this.dealer) this.auto_play_dealer(this.dealer);
    },
    auto_play_dealer: function(dealer){
      // dealer must hit if less than 17, must stand if above
      while (dealer.score[0] < 17) this.deal_card(this.pull_card_from_deck());
      this.end_game();
    },
    deal_card: function(card){
      var current_player = this.current_player;
      current_player.game_started = true;
      current_player.hands = [...current_player.hands, card];
      this.update_score(current_player, card);
    },
    pull_card_from_deck: function(){
      return this.deck.shift();
    },
    get_next_player: function(){
      // switch back to first player after the dealer
      // then get the player at the next index until you reach the end
      // dealer id is 0
      // first player id is 1
      return this.players[this.current_player.id];
    },
    update_score: function(current_player, card){
      // this is doing the heavy work calculating the score
      var card_value = card.value;
      var card_value_alt = card.value_alt;
      var card_is_ace = card_value == 11;

      // don't have two aces at 11 since that would be over 21
      // if this card is an ace and the round already has an ace then add to score by alt value: 1
      // otherwise add by the score
      current_player.score[0] += card_is_ace && current_player.has_ace ? card_value_alt : card_value;
      current_player.score[1] += card_value_alt || card_value;

      // set the state that the ace has been accounted for
      if (card_is_ace && !current_player.has_ace) current_player.has_ace = true;

      // if ace puts score higher than 21 then set score to lower, alt score
      if (current_player.score[0] > 21) current_player.score[0] = current_player.score[1];
    },
    end_game: function(){
      this.game_over = true;
      this.game_status = 'the whole game is OVER!';
      this.restart_button.text = 'Play New Game!';
    },
    reset: function(){
      // https://stackoverflow.com/questions/35604987/is-there-a-proper-way-of-resetting-a-components-initial-data-in-vuejs/35605629
      Object.assign(this.$data, default_data());
    },
    restart: function(){
      this.reset();
      this.deal();
    }
  }
});
</script>

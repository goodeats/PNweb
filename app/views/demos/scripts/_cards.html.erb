<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,500,700,900">
<style>
.card-item {
  width: 50px;
  height: 80px;
  display: inline-block;
  position: relative;
  margin: 20px;
  margin-right: -30px;
  background: white;
  border: 1px solid black;
  border-radius: 10px;
  text-align: center;
  font: 1rem/1.175 "BlinkMacSystemFont", -apple-system, "Roboto", sans-serif;
}

.card-name--top,
.card-name--bottom {
  position: absolute;
  padding: 5px;
}

.card-name--top {
  top: 0;
  left: 0;
}

.card-name--bottom {
  bottom: 0;
  right: 0;
  transform: rotate(180deg);
}

.card-suit {
  line-height: 80px;
}


</style>


<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>
<script>

Vue.component('card', {
  props: ['card'],
  template: `
    <li class="card-item">
      <span class="card-name--top">{{ pretty_card(card) }}</span>
      <span class="card-suit">{{ card.suit }}</span>
      <span class="card-name--bottom">{{ pretty_card(card) }} </span>
    </li>
  `,
  methods: {
    pretty_card: function(card){
      return card.name.toString().toUpperCase();
    }
  }
});

function suits(){
  return ['❤️','♠️','♦️','♣️'];
};

function cards_by_type(){
  var deck = [
    {name: 'a', value: 11, value_alt: 1},
    {name: 'k', value: 10},
    {name: 'q', value: 10},
    {name: 'j', value: 10}
  ];
  for (var i = 10; i > 1; i--){
    deck.push({name: i, value: i});
  }

  return deck;
};

function get_suits(cards){
  var deck = [];
  cards.forEach(function(card){
    suits().forEach(function(suit){
      var card_copy = JSON.parse(JSON.stringify(card));
      card_copy.suit = suit;
      deck = [...deck, card_copy];
    });
  });
  return deck;
}

function get_cards(){
  return get_suits(cards_by_type());
}

function score_with_ace(score){
  var player_score = score[0];
  var player_score_alt = score[1];
  if (player_score !== player_score_alt){
    return player_score + " (or " + player_score_alt + ")";
  } else {
    return player_score;
  }
}

function default_data(){
  return {
    message: 'Hi Pat!',
    cards: get_cards(),
    hands: [], // one player
    score: [0,0],
    game_status: 'Start the game!',
    game_started: false,
    game_over: false,
    has_ace: false, // should only have one ace at 11 per round
    dealer_has_ace: false, // should only have one ace at 11 per round
    dealer_score: [0,0],
    dealer_hands: [],
    deal_to_player: true
  };
}

var app = new Vue({
  el: '#app',
  data: default_data(),
  methods: {
    shuffle: function(){
      return this.cards.sort((a, b) => Math.random() > .5 ? -1 : 1);
    },
    deal: function(){
      if (this.game_over) return;
      if (this.game_started){
        this.deal_card();
      } else {
        this.start_game();
      }
    },
    start_game: function(){
      this.game_started = true;
      this.game_status = 'Playing the game';
      var yo = this;
      [1,2,3,4].forEach(function(i){
        yo.deal_card();
        yo.next_player();
      });
    },
    next_player: function(){
      this.deal_to_player = !this.deal_to_player;
    },
    deal_card: function(){
      var card = this.cards.shift();
      if (this.deal_to_player){
        this.hands = [...this.hands, card];
        this.updateScore(card);
      } else {
        this.dealer_hands = [...this.dealer_hands, card];
        this.updateDealerScore(card);
      }
    },
    player_score: function(score){
      var player_score = score[0];
      if (player_score > 21){
        this.game_status = 'You Lost :(';
        this.game_over = true;
      } else if (player_score === 21){
        this.game_status = 'You Won :D';
        this.game_over = true;
      }
      return score_with_ace(score);
    },
    updateScore: function(card){
      // this is doing the heavy work calculating the score
      var card_value = card.value;
      var card_value_alt = card.value_alt;
      var card_is_ace = card_value == 11;

      // don't have two aces at 11 since that would be over 21
      // if this card is an ace and the round already has an ace then add to score by alt value: 1
      // otherwise add by the score
      this.score[0] += card_is_ace && this.has_ace ? card_value_alt : card_value;
      this.score[1] += card_value_alt || card_value;

      // set the state that the ace has been accounted for
      if (card_is_ace && !this.has_ace) this.has_ace = true;

      // if ace puts score higher than 21 then set score to lower, alt score
      if (this.score[0] > 21) this.score[0] = this.score[1];
    },
    show_dealer_score: function(score){
      return score;
    },
    updateDealerScore: function(card){
      // this is doing the heavy work calculating the score
      var card_value = card.value;
      var card_value_alt = card.value_alt;
      var card_is_ace = card_value == 11;

      // don't have two aces at 11 since that would be over 21
      // if this card is an ace and the round already has an ace then add to score by alt value: 1
      // otherwise add by the score
      this.dealer_score[0] += card_is_ace && this.dealer_has_ace ? card_value_alt : card_value;
      this.dealer_score[1] += card_value_alt || card_value;

      // set the state that the ace has been accounted for
      if (card_is_ace && !this.dealer_has_ace) this.dealer_has_ace = true;

      // if ace puts score higher than 21 then set score to lower, alt score
      if (this.dealer_score[0] > 21) this.dealer_score[0] = this.dealer_score[1];
    },
    restart: function(){
      // https://stackoverflow.com/questions/35604987/is-there-a-proper-way-of-resetting-a-components-initial-data-in-vuejs/35605629
      Object.assign(this.$data, default_data());
    }
  }
});
</script>
